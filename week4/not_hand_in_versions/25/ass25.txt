Encapsulation: 
A programming concept where related sections of code (i.e. related functions
and data) are bound together and are used only in relation to one
another. Encapsulating code ensures that the code remains modular and the 
integrity of the data remains. The class encapsulates all actions performed 
on its data members. The class object may assume the 
responsibility for its own data-integrity.

Data hiding:
When data is hidden, it cannot be touched directly by anything outside of 
that class or classes that extend from this class (or as the book calls it,
the data cannot directly by touched by the outer world). 
Things can access it, but only by using specific methods that the
programmer made to either get or manipulate the data (called accessors
and manipulators). This means that the data is much safer when compared to
keeping all the data public. With data hiding you enforce the data-integrity.
This is why encapsulation and data hiding go perfectly together.

Consider the example of the Wizard class interface underneath:
(only the interface is required for the understanding of code encapsulation,
because encapsulation is all about how the user approaches the data, the user
only ever has to see the interface of a class and not the implementation.)

class Wizard
{
    int d_health;
    int d_magic;
    
    public:
	Wizard();
	fireball();
	
};

In the example above of the Wizard class, the 2 ints d_health and d_magic,
the constructor Wizard() and the member function fireball() are all 
encapsulated together. If the program wants to work with these pieces of 
data specifically, it must use the Wizard class member functions.
This also allows the programmer to change the member functions as long as the
input and output stays the same and the declaration stays the same. 
The developer using these functions does not need to worry
about the definition of the function, this makes the code more modular and 
easy to work with.

There are 2 ints defined in the private part of the class. All data in 
classes are private unless specified to be public - this is an important 
aspect of data hiding that classes implement. Private data is not allowed to 
be touched by anything other than the fellow members of the class. 
The information inside of d_health and d_magic stay separated 
from the publicly available data / local data, and that data remains 
"hidden" from code outside of the class (or the classes that inherit
this code, when we will be using 'protected' later on).
