Encapsulation: 
A programming concept where relatedXXX sections of code (i.e. related functions
and data-types) are bound together and are used only in relation to one
another. Encapsulating code ensures that the code remains modular and the 
integrity of the data remains.

Data hiding:
When data is hidden, it cannot be touched directly by anything outside of 
that class. Things can access it, but only by using specific methods that the
programmer made to either get or manipulate the data (called accessors
and manipulators). This means that the data is much safer when compared to
keeping all the data public.

Consider the example of the wizard class interface underneath:
(only the interface is required for the understanding of code encapsulation, 
because encapsulation is all about how the user approaches the data - the 
user only ever has to see the interface of a class and not the implementation.)

class Wizard
{
    int d_health;
    int d_magic;
    
    public:
	Wizard();
	fireball();
	
};

In the above example of the class wizard, the 2 ints d_health and d_magic,
the constructor Wizard() and the member function fireball() are all 
encapsulated together. Working with these pieces of data specifically 
requires the program to run them through the Wizard class frameworkXXX - 
therefore if the programmer ever wishes to change something about fireball(),
they can do so safely without worrying about the rest of the program.
XXX verschil declaration and definition ff noemen

There are 2 ints defined in the private part of the class. All data in 
classes are private unless specified to be public - this is an important 
aspect of data hiding that classes implement. Private data is not allowed to 
be touched XXXby the program by anything other than the fellow members of the 
block in which it was defined. This allows the information inside of d_health
 and d_magic to stay separated XXX(separated from what????) and for that data to remain "hidden" from the 
computerXXX(the computer is hier niet het woord).